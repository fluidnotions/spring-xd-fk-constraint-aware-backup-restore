<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/batch	http://www.springframework.org/schema/batch/spring-batch-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd">
		
    <import resource="classpath:/META-INF/spring-xd/batch/singlestep-partition-support.xml"/>
	
	<batch:job id="job" restartable="${restartable}" xmlns="http://www.springframework.org/schema/batch">
		<batch:step id="step1-master">
			 <batch:partition handler="partitionHandler" partitioner="partitioner" />
			 <batch:next on="COMPLETED" to="step2-zipFile" />
		</batch:step>
		<batch:step id="step2-zipFile">
			<batch:tasklet ref="zipFileTasklet" />
			<batch:next on="COMPLETED" to="step3-fileCleanUp" />
		</batch:step>
		<batch:step id="step3-fileCleanUp">
			<batch:tasklet ref="fileCleanUpTasklet" />
		</batch:step>
	</batch:job>
	
	<bean id="partitioner"
		class="com.fluidnotions.springbatch.export.extended.QueryListPartitioner" scope="step">
		<property name="dataSource" ref="dataSource" />
		<!-- <property name="targetDatabaseName" ref="${targetDatabaseName}" /> -->
		<property name="jobKey" value="#{jobParameters['jobKey']}" />
	</bean>
	
	<batch:step id="step1">
		<batch:tasklet>
			<batch:chunk reader="itemReader" writer="itemWriter"
				commit-interval="${commitInterval}" />
		</batch:tasklet>
	</batch:step>

	<bean id="moduleDataSource" class="org.apache.tomcat.jdbc.pool.DataSource"
		destroy-method="close">
		<property name="driverClassName" value="${driverClassName}" />
		<property name="url" value="${dbUrl}" />
		<property name="username" value="${dbUsername}" />
		<property name="password" value="${dbPassword}" />
		<property name="initialSize" value="0" />
		<property name="maxActive" value="100" />
		<property name="maxIdle" value="100" />
		<property name="minIdle" value="10" />
		<property name="maxWait" value="30000" />
		<property name="validationQuery"
			value="select 1 from INFORMATION_SCHEMA.SYSTEM_USERS" />
		<property name="timeBetweenEvictionRunsMillis" value="5000" />
		<property name="minEvictableIdleTimeMillis" value="30000" />
	</bean>

	<bean id="itemReader"
		class="com.fluidnotions.springbatch.export.extended.JdbcItemReaderFactory"
		scope="step">
		<property name="dataSource" ref="moduleDataSource" />
		<property name="sql" value="#{stepExecutionContext['sqlQuery']}" />
	</bean>

	<!-- <bean id="xmlItemWriter" class="org.springframework.batch.item.xml.StaxEventItemWriter" scope="step">
		<property name="resource"
			value="file:${exportDir}/#{jobParameters['jobKey']}/#{stepExecutionContext['orderFileNamePrefix']}-#{stepExecutionContext['tableFileName']}.${exportFileExtension}" />
		<property name="marshaller" ref="marshaller" />
		<property name="rootTagName" value="#{stepExecutionContext['tableFileName']}" />
	</bean>
	
	<bean id="marshaller" class="org.springframework.oxm.xstream.XStreamMarshaller" scope="step">
		<property name="aliases">
			<util:map id="aliases">
				<entry key="#{stepExecutionContext['tableFileName']}" value="org.springframework.xd.tuple.batch.TupleFieldExtractor" />
			</util:map>
		</property>
	</bean> -->
	
	<bean id="itemWriter" class="org.springframework.batch.item.file.FlatFileItemWriter"
		scope="step">
		<property name="resource"
			value="file:${exportDir}/#{jobParameters['jobKey']}/#{stepExecutionContext['orderFileNamePrefix']}-#{stepExecutionContext['tableFileName']}.${exportFileExtension}" />
		<property name="lineAggregator">
			<!-- An Aggregator which converts an tuple object into json strings -->
			<bean class="com.fluidnotions.springbatch.export.extended.TuplePassThroughLineAggregator"/>
		</property>
	</bean>

	<!-- tasklets -->
	
	<bean id="zipFileTasklet" class="com.fluidnotions.springbatch.export.tasklets.ZipFile" scope="step">
		<property name="zippedFilePath" value="${exportDir}/#{jobParameters['jobKey']}.zip" />
		<property name="directory" value="file:${exportDir}/#{jobParameters['jobKey']}" />
  	 </bean>
	
	 <bean id="fileCleanUpTasklet" class="com.fluidnotions.springbatch.export.tasklets.FileCleanUp" scope="step">
		<property name="directory" value="file:${exportDir}/#{jobParameters['jobKey']}" />
		<property name="deleteFolder" value="true"/>
		<!-- <property name="directories" value="${exportDir}/${exportPartsDir},${exportDir}/${exportJoinedDir}" /> -->
  	 </bean>
	
</beans>			